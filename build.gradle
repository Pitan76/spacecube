plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.pitan76.net/" }
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://mod-buildcraft.com/maven/"}
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.pitan76:mcpitanlib-fabric${rootProject.mcpitanlib_version}"
    include "net.pitan76:mcpitanlib_checker-fabric:${rootProject.mcpitanlib_checker_version}"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "alexiil.mc.lib:libblockattributes-all:${project.libblockattribute_version}"

    modImplementation("teamreborn:energy:${project.tr_energy_version}")



    modImplementation 'RebornCore:RebornCore-1.18:+'
    modImplementation 'TechReborn:TechReborn-1.18:+'
    modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modImplementation "alexiil.mc.mod:simplepipes-all:0.7.2"

}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 8
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}


curseforge {
    if (System.getenv("CURSEFORGE_TOKEN") != null) {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        project {
            id = '964401'
            changelog = "Add Upgraders\nMCPitanLib version: " + mcpitanlib_version.split(":")[1]
            releaseType = 'release'
            addGameVersion '1.18.2'
            addGameVersion '1.19'
            addGameVersion '1.19.1'
            addGameVersion '1.19.2'
            addGameVersion '1.20'
            addGameVersion '1.20.1'
            addGameVersion '1.20.3'
            addGameVersion '1.20.4'
            addGameVersion "Fabric"
            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'mcpitanlibarch'
                optionalDependency 'cloth-config'
                optionalDependency 'modmenu'
                optionalDependency 'reborncore'
            }

            mainArtifact(remapJar)
        }
        options {
            forgeGradleIntegration = false
        }
    }
}

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
    if (System.getenv("MODRINTH_TOKEN") != null) {
        token = System.getenv("MODRINTH_TOKEN")
        projectId = 'H5uBVVRE'
        versionNumber = project.mod_version
        uploadFile = remapJar
        gameVersions = ['1.18.2', '1.19', '1.19.1', '1.19.2', '1.20', '1.20.1', '1.20.3', '1.20.4']
        versionType = 'release'
        loaders = ['fabric']
        changelog = "Add Upgraders\nMCPitanLib version: " + mcpitanlib_version.split(":")[1]
        dependencies = [
                new ModDependency('P7dR8mSH', 'required'),  // Fabric API
                new ModDependency('uNRoUnGT', 'required'),  // mcpitanlib
                new ModDependency('9s6osm5g', 'optional'),  // Cloth Config
                new ModDependency('mOgUt4GM', 'optional')   // Mod Menu
        ]
    }
}

task publishToModSites {
    publishToModSites.dependsOn modrinth
    publishToModSites.dependsOn curseforge
}